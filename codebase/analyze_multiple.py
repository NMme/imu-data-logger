from read_data import read_csv_input
import numpy as np
from scipy import signal
import matplotlib.pyplot as plt

data0 = read_csv_input('left_DLPF0.csv')
data1 = read_csv_input('left_DLPF1.csv')
data2 = read_csv_input('left_DLPF2.csv')
data3 = read_csv_input('left_DLPF3.csv')
data4 = read_csv_input('left_DLPF4.csv')
data5 = read_csv_input('left_DLPF5.csv')
data6 = read_csv_input('left_DLPF6.csv')
data7 = read_csv_input('left_DLPF7.csv')

# show original data plots
plt.figure(1)
plt.subplot(311)
plt.title('IMU Values X-Accel')
plt.plot(data0[0],data0[1]) 
plt.plot(data3[0],data3[1]) 
plt.plot(data6[0],data6[1]) 
plt.xlabel('time(s)')
plt.ylabel('Accel(m/s2)')
plt.subplot(312)
plt.title('IMU Values Y-Accel')
plt.plot(data0[0],data0[2]) 
plt.plot(data3[0],data3[2]) 
plt.plot(data6[0],data6[2]) 
plt.xlabel('time(s)')
plt.ylabel('Accel(m/s2)')
plt.subplot(313)
plt.title('IMU Values Z-Accel')
plt.plot(data0[0],data0[3]) 
plt.plot(data3[0],data3[3]) 
plt.plot(data6[0],data6[3]) 
plt.xlabel('time(s)')
plt.ylabel('Accel(m/s2)')
#plt.show()

# calculate variances
x_var0 = np.var(data0[1])
x_var1 = np.var(data1[1])
x_var2 = np.var(data2[1])
x_var3 = np.var(data3[1])
x_var4 = np.var(data4[1])
x_var5 = np.var(data5[1])
x_var6 = np.var(data6[1])
x_var7 = np.var(data7[1])

y_var0 = np.var(data0[2])
y_var1 = np.var(data1[2])
y_var2 = np.var(data2[2])
y_var3 = np.var(data3[2])
y_var4 = np.var(data4[2])
y_var5 = np.var(data5[2])
y_var6 = np.var(data6[2])
y_var7 = np.var(data7[2])

z_var0 = np.var(data0[3])
z_var1 = np.var(data1[3])
z_var2 = np.var(data2[3])
z_var3 = np.var(data3[3])
z_var4 = np.var(data4[3])
z_var5 = np.var(data5[3])
z_var6 = np.var(data6[3])
z_var7 = np.var(data7[3])

plt.figure(2)
plt.title('IMU variance Accel')
plt.plot(range(0,8), [x_var0, x_var1, x_var2, x_var3, x_var4, x_var5, x_var6, x_var7] ) 
plt.plot(range(0,8), [y_var0, y_var1, y_var2, y_var3, y_var4, y_var5, y_var6, y_var7] ) 
plt.plot(range(0,8), [z_var0, z_var1, z_var2, z_var3, z_var4, z_var5, z_var6, z_var7] ) 
plt.xlabel('#TP')
plt.ylabel('variance')
#plt.show()

#claculate power density
fs = np.round(np.mean(20000/np.diff(data0[0])))
fx_lds, Pxx_den = signal.periodogram(data0[1], fs)
akf_x = signal.correlate(data0[1]-np.mean(data0[1]), data0[1]-np.mean(data0[1]))
fx_lds_TP3, Pxx_den_TP3 = signal.periodogram(data3[1], fs)
akf_x_TP3 = signal.correlate(data3[1]-np.mean(data3[1]), data3[1]-np.mean(data3[1]))
fx_lds_TP6, Pxx_den_TP6 = signal.periodogram(data6[1], fs)
akf_x_TP6 = signal.correlate(data6[1]-np.mean(data6[1]), data6[1]-np.mean(data6[1]))

plt.figure(3)
plt.subplot(311)
plt.plot(fx_lds, Pxx_den)
plt.plot(fx_lds_TP3, Pxx_den_TP3)
plt.plot(fx_lds_TP6, Pxx_den_TP6)
plt.title('spectral density')
plt.xlabel('freq')
plt.ylabel('PSD')
plt.subplot(312)
plt.plot(akf_x)
plt.plot(akf_x_TP3)
plt.plot(akf_x_TP6)
plt.title('AKF')
plt.xlabel('tau')
plt.ylabel('korr')
plt.tight_layout()
plt.subplot(313)
plt.plot(fx_lds_TP3, Pxx_den_TP3/Pxx_den)
#plt.plot(fx_lds_TP6, Pxx_den_TP6/Pxx_den)
plt.title('Amplitudengang')
plt.xlabel('f')
plt.ylabel('betragsquadrat')
plt.tight_layout()
#plt.show()

#smoothing approach
Pxx_smooth = signal.savgol_filter(Pxx_den, 55, 2, mode='nearest')
Pxx_TP3_smooth = signal.savgol_filter(Pxx_den_TP3, 55, 2, mode='nearest')
Pxx_TP6_smooth = signal.savgol_filter(Pxx_den_TP6, 55, 2, mode='nearest')
plt.figure(4)
plt.subplot(311)
plt.plot(fx_lds, Pxx_smooth)
plt.plot(fx_lds_TP3, Pxx_TP3_smooth)
plt.plot(fx_lds_TP6, Pxx_TP6_smooth)
plt.title('spectral density')
plt.xlabel('freq')
plt.ylabel('PSD')
plt.subplot(312)
plt.plot(fx_lds_TP3, Pxx_TP3_smooth/Pxx_smooth)
plt.plot(fx_lds_TP6, Pxx_TP6_smooth/Pxx_smooth)
plt.title('Amplitudengang')
plt.xlabel('f')
plt.ylabel('betragsquadrat')
plt.show()
